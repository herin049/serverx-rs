#[derive(Copy, Clone, Debug, Eq, PartialEq)]
pub struct BlockState(u64);

impl BlockState {
    pub const COUNT: usize = {{ state_count }};
    pub const BITS: usize = (u64::BITS - {{ state_count - 1}}u64.leading_zeros()) as usize;

    pub fn id(&self) -> u64 {
        self.0
    }
}


#[derive(Copy, Clone, Debug)]
pub struct InvalidStateErr;

impl TryFrom<u64> for BlockState {
    type Error = InvalidStateErr;

    fn try_from(value: u64) -> Result<Self, Self::Error> {
        if value < (BlockState::COUNT as u64) {
            Ok(BlockState(value))
        } else {
            Err(InvalidStateErr)
        }
    }
}

impl BlockState {
    pub fn luminance(&self) -> i32 {
        match self.0 {
            {% for s in states %}
            {{ s["id"] }} => {{ s["luminance"] }},
            {% endfor %}
            _ => panic!("invalid block state")
        }
    }

    pub fn opaque(&self) -> bool {
        match self.0 {
            {% for s in states %}
            {{ s["id"] }} => {{ "true" if s["opaque"] else "false" }},
            {% endfor %}
            _ => panic!("invalid block state")
        }
    }
    
    pub fn replaceable(&self) -> bool {
        match self.0 {
            {% for s in states %}
            {{ s["id"] }} => {{ "true" if s["replaceable"] else "false" }},
            {% endfor %}
            _ => panic!("invalid block state")
        }
    }
    
    pub fn blocks_motion(&self) -> bool {
        match self.0 {
            {% for s in states %}
            {{ s["id"] }} => {{ "true" if s["blocks_motion"] else "false" }},
            {% endfor %}
            _ => panic!("invalid block state")
        }
    }

    pub fn is_air(&self) -> bool {
        match self.0 {
            {% for s in states %}
            {{ s["id"] }} => {{ "true" if s["is_air"] else "false" }},
            {% endfor %}
            _ => panic!("invalid block state")
        }
    }
}

impl Into<Block> for BlockState {
    fn into(self) -> Block {
        match self.0 {
            {% for s in states %}
            {% if s.get("properties", {}) %}
            {{ s["id"] }} => Block::{{pascalcase(s["block"]["name"])}} {
                {% for name, value in s["properties"].items() %}
                {{ name }}: {{ value }},
                {% endfor %}
            },
            {% else %}
            {{ s["id"] }} => Block::{{pascalcase(s["block"]["name"])}},
            {% endif %}
            {% endfor %}
            _ => Block::default()
        }
    }
}

impl From<Block> for BlockState {
    fn from(value: Block) -> Self {
        match value {
            {% for b in blocks %}
            {% if b.get("properties", []) |length != 0 %}
            Block::{{ pascalcase(b["name"]) }} { {% for p in b["properties"] %}{{ p["name"] }},{% endfor %} } => {
                match ({% for p in b["properties"] %}{{ p["name"] }},{% endfor %}) {
                    {% for s in b["states"] %}
                    ({% for p in b["properties"] %}{{ s["properties"][p["name"]] }},{% endfor %}) => BlockState({{ s["id"] }}),
                    {% endfor %}
                    _ => panic!("invalid block state")
                }
            }
            {% else %}
            Block::{{ pascalcase(b["name"]) }} => BlockState({{ b["default_state_id"]}}),
            {% endif %}
            {% endfor %}
        } 
    }
}